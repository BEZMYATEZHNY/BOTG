import logging
import asyncio
import os
import json
import secrets
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DELETE_DELAY = 5
SETTINGS_DIR = "Settings"
MESSAGES_FILE = "stored_messages.json"
USER_LAST_MESSAGE = {}
SENT_MESSAGES = []

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_SETTINGS = {
    'welcome_text': "‚Çä‚äπ  –ü—Ä–∏–≤–µ—Ç–∏–∫‚ãÜÀöÍ©úÔΩ°\n\n‡≥Ä üç® ‚Äß Àö üéÄ ‚äπÀö. ‚ô°\n\n‚ô°‚∏ù‚∏ù  –Ø –±–æ—Ç–∏–∫ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π :3\nÀö ö–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏ —è –µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª—é –∫—É–¥–∞ –Ω—É–∂–Ω–æ…ûÀö\nüêæ by @Bbl_KOH4EHblE",
    'welcome_gif': "https://media.tenor.com/4YmoLrHy-yoAAAAi/vtuber-anime-girl.gif",
    'channel_template': "üí¨ {content}",
    'tagline': "üíå –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    'notify_owner': True,
    'accumulate_mode': False,
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ Settings –∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def initialize_settings():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É Settings –∏ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(SETTINGS_DIR):
            os.makedirs(SETTINGS_DIR)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {SETTINGS_DIR}")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setting_files = {
            'welcome_text.txt': DEFAULT_SETTINGS['welcome_text'],
            'welcome_gif.txt': DEFAULT_SETTINGS['welcome_gif'],
            'channel_template.txt': DEFAULT_SETTINGS['channel_template'],
            'tagline.txt': DEFAULT_SETTINGS['tagline'],
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for filename, default_value in setting_files.items():
            file_path = os.path.join(SETTINGS_DIR, filename)
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(default_value)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {filename}")
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initialize_settings()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_setting(setting_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        file_path = os.path.join(SETTINGS_DIR, f"{setting_name}.txt")
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read().strip()
        return DEFAULT_SETTINGS.get(setting_name, "")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {setting_name}: {e}")
        return DEFAULT_SETTINGS.get(setting_name, "")

def load_all_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    return {
        'welcome_text': load_setting('welcome_text'),
        'welcome_gif': load_setting('welcome_gif'),
        'channel_template': load_setting('channel_template'),
        'tagline': load_setting('tagline'),
        'notify_owner': DEFAULT_SETTINGS['notify_owner'],
        'accumulate_mode': DEFAULT_SETTINGS['accumulate_mode']
    }

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(MESSAGES_FILE):
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

def save_messages():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        with open(MESSAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(stored_messages, f, indent=4, default=str)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
bot_settings = load_all_settings()
stored_messages = load_messages()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_invite_link(context):
    code = secrets.token_urlsafe(6)[:8]
    bot_username = context.bot.username
    return f"https://t.me/{bot_username}?start={code}"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        await update.message.reply_animation(
            animation=bot_settings['welcome_gif'],
            caption=bot_settings['welcome_text'],
            parse_mode=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text(bot_settings['welcome_text'])

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != context.bot_data['OWNER_ID']:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    new_count = sum(1 for user_msgs in stored_messages.values() for msg in user_msgs if not msg.get('viewed', False))
    total_count = sum(len(msgs) for msgs in stored_messages.values())
    
    keyboard = [
        [InlineKeyboardButton(f"üíå –°–æ–æ–±—â–µ–Ω–∏—è ({new_count}/{total_count})", callback_data="view_messages")],
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_link")],
        [InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def show_main_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–ö–õ' if bot_settings['notify_owner'] else '‚ùå –í–´–ö–õ'}",
                callback_data="toggle_notify"
            )
        ],
        [
            InlineKeyboardButton(
                f"üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: {'‚úÖ –í–ö–õ' if bot_settings['accumulate_mode'] else '‚ùå –í–´–ö–õ'}",
                callback_data="toggle_accumulate"
            )
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è *–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏* ‚ú®\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if bot_settings['notify_owner'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"üì¶ –†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω' if bot_settings['accumulate_mode'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≥–∏—Ñ–∫–∞, —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è "
        "—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ Settings",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def view_accumulated_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not stored_messages:
        await query.edit_message_text("üì≠ –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return
    
    keyboard = []
    for user_id, messages in stored_messages.items():
        new_count = sum(1 for msg in messages if not msg.get('viewed', False))
        username = messages[0].get('username', '–±–µ–∑ @username')
        full_name = messages[0].get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        keyboard.append([
            InlineKeyboardButton(
                f"{full_name} (@{username}) - {len(messages)} —Å–æ–æ–±—â. ({new_count} –Ω–æ–≤—ã—Ö)",
                callback_data=f"user_msgs_{user_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì¨ *–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def view_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.replace("user_msgs_", "")
    messages = stored_messages.get(user_id, [])
    
    if not messages:
        await query.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
    for msg in messages:
        msg['viewed'] = True
    save_messages()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    message_list = []
    for i, msg in enumerate(messages, 1):
        timestamp = datetime.fromisoformat(msg['timestamp']).strftime("%d.%m.%Y %H:%M")
        content_preview = msg['content'][:100] + ('...' if len(msg['content']) > 100 else '')
        message_list.append(f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ #{i}* ({timestamp}):\n{content_preview}")
    
    text = "\n\n".join(message_list)
    full_name = messages[0].get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    username = messages[0].get('username', '–±–µ–∑ @username')
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_messages")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üì≠ *–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {full_name} (@{username})* ‚ú®\n\n{text}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
async def generate_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    invite_link = generate_invite_link(context)
    
    keyboard = [[
        InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={invite_link}&text=–ó–∞–¥–∞–π –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ‚ú®")
    ], [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîó *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤* ‚ú®\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n\n"
        f"üëâ `{invite_link}`\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "view_messages":
        await view_accumulated_messages(update, context)
    elif query.data == "get_link":
        await generate_link(update, context)
    elif query.data == "main_settings":
        await show_main_settings(update, context)
    elif query.data == "toggle_notify":
        bot_settings['notify_owner'] = not bot_settings['notify_owner']
        await show_main_settings(update, context)
    elif query.data == "toggle_accumulate":
        bot_settings['accumulate_mode'] = not bot_settings['accumulate_mode']
        await show_main_settings(update, context)
    elif query.data.startswith("user_msgs_"):
        await view_user_messages(update, context)
    elif query.data in ["back_to_admin", "back_to_main"]:
        await admin_panel_callback(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_welcome_message(update, context)

# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def auto_delete_messages(context: CallbackContext):
    global SENT_MESSAGES
    current_time = datetime.now()
    
    for msg_data in SENT_MESSAGES[:]:
        if (current_time - msg_data['timestamp']) > timedelta(minutes=25):
            try:
                await context.bot.delete_message(
                    chat_id=msg_data['chat_id'],
                    message_id=msg_data['message_id']
                )
                SENT_MESSAGES.remove(msg_data)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {msg_data['message_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
async def send_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ê–Ω—Ç–∏—Å–ø–∞–º
        user_id = update.message.from_user.id
        current_time = datetime.now()
        
        if user_id in USER_LAST_MESSAGE:
            if (current_time - USER_LAST_MESSAGE[user_id]).seconds < 10:
                warning = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥!")
                await asyncio.sleep(3)
                await warning.delete()
                return
        USER_LAST_MESSAGE[user_id] = current_time
        
        # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥
        if update.message.text and update.message.text.startswith('/'):
            return
            
        user = update.message.from_user
        content = update.message.text or update.message.caption or "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_message = bot_settings['channel_template'].format(content=content)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        sent_message = None
        if update.message.text:
            sent_message = await context.bot.send_message(
                chat_id=context.bot_data['CHANNEL_ID'],
                text=formatted_message
            )
        elif update.message.photo:
            sent_message = await context.bot.send_photo(
                chat_id=context.bot_data['CHANNEL_ID'],
                photo=update.message.photo[-1].file_id,
                caption=formatted_message
            )
        elif update.message.video:
            sent_message = await context.bot.send_video(
                chat_id=context.bot_data['CHANNEL_ID'],
                video=update.message.video.file_id,
                caption=formatted_message
            )
        elif update.message.document:
            sent_message = await context.bot.send_document(
                chat_id=context.bot_data['CHANNEL_ID'],
                document=update.message.document.file_id,
                caption=formatted_message
            )
        elif update.message.audio:
            sent_message = await context.bot.send_audio(
                chat_id=context.bot_data['CHANNEL_ID'],
                audio=update.message.audio.file_id,
                caption=formatted_message
            )
        elif update.message.voice:
            sent_message = await context.bot.send_voice(
                chat_id=context.bot_data['CHANNEL_ID'],
                voice=update.message.voice.file_id,
                caption=formatted_message
            )
        elif update.message.sticker:
            sent_message = await context.bot.send_sticker(
                chat_id=context.bot_data['CHANNEL_ID'],
                sticker=update.message.sticker.file_id
            )
        elif update.message.animation:
            sent_message = await context.bot.send_animation(
                chat_id=context.bot_data['CHANNEL_ID'],
                animation=update.message.animation.file_id,
                caption=formatted_message
            )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
        if sent_message:
            SENT_MESSAGES.append({
                'message_id': sent_message.message_id,
                'chat_id': context.bot_data['CHANNEL_ID'],
                'timestamp': datetime.now()
            })
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        user_id = str(user.id)
        if user_id not in stored_messages:
            stored_messages[user_id] = []
        
        stored_messages[user_id].append({
            'timestamp': datetime.now().isoformat(),
            'type': 'text',
            'content': content,
            'full_name': user.full_name,
            'username': user.username,
            'viewed': False
        })
        save_messages()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = await update.message.reply_text(
            "‚ú® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!* üíñ\n"
            "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="Markdown"
        )
        await update.message.delete()
        await asyncio.sleep(DELETE_DELAY)
        await confirmation.delete()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        context.bot_data['message_count'] = context.bot_data.get('message_count', 0) + 1
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    new_count = sum(1 for user_msgs in stored_messages.values() for msg in user_msgs if not msg.get('viewed', False))
    total_count = sum(len(msgs) for msgs in stored_messages.values())
    
    keyboard = [
        [InlineKeyboardButton(f"üíå –°–æ–æ–±—â–µ–Ω–∏—è ({new_count}/{total_count})", callback_data="view_messages")],
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_link")],
        [InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚ú®\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

def main():
    from config import BOT_TOKEN, CHANNEL_ID, OWNER_ID
    
    application = Application.builder().token(BOT_TOKEN).build()
    application.bot_data['CHANNEL_ID'] = CHANNEL_ID
    application.bot_data['OWNER_ID'] = OWNER_ID
    application.bot_data['message_count'] = 0
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, 
        send_to_channel
    ))
    
    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(auto_delete_messages, interval=60, first=10)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main() import logging
import asyncio
import os
import json
import secrets
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DELETE_DELAY = 5
SETTINGS_DIR = "Settings"
MESSAGES_FILE = "stored_messages.json"
USER_LAST_MESSAGE = {}
SENT_MESSAGES = []

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_SETTINGS = {
    'welcome_text': "‚Çä‚äπ  –ü—Ä–∏–≤–µ—Ç–∏–∫‚ãÜÀöÍ©úÔΩ°\n\n‡≥Ä üç® ‚Äß Àö üéÄ ‚äπÀö. ‚ô°\n\n‚ô°‚∏ù‚∏ù  –Ø –±–æ—Ç–∏–∫ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π :3\nÀö ö–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏ —è –µ–≥–æ –¥–æ—Å—Ç–∞–≤–ª—é –∫—É–¥–∞ –Ω—É–∂–Ω–æ…ûÀö\nüêæ by @Bbl_KOH4EHblE",
    'welcome_gif': "https://media.tenor.com/4YmoLrHy-yoAAAAi/vtuber-anime-girl.gif",
    'channel_template': "üí¨ {content}",
    'tagline': "üíå –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    'notify_owner': True,
    'accumulate_mode': False,
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ Settings –∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def initialize_settings():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É Settings –∏ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(SETTINGS_DIR):
            os.makedirs(SETTINGS_DIR)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {SETTINGS_DIR}")
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setting_files = {
            'welcome_text.txt': DEFAULT_SETTINGS['welcome_text'],
            'welcome_gif.txt': DEFAULT_SETTINGS['welcome_gif'],
            'channel_template.txt': DEFAULT_SETTINGS['channel_template'],
            'tagline.txt': DEFAULT_SETTINGS['tagline'],
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        for filename, default_value in setting_files.items():
            file_path = os.path.join(SETTINGS_DIR, filename)
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(default_value)
                logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: {filename}")
        
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initialize_settings()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def load_setting(setting_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        file_path = os.path.join(SETTINGS_DIR, f"{setting_name}.txt")
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read().strip()
        return DEFAULT_SETTINGS.get(setting_name, "")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {setting_name}: {e}")
        return DEFAULT_SETTINGS.get(setting_name, "")

def load_all_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    return {
        'welcome_text': load_setting('welcome_text'),
        'welcome_gif': load_setting('welcome_gif'),
        'channel_template': load_setting('channel_template'),
        'tagline': load_setting('tagline'),
        'notify_owner': DEFAULT_SETTINGS['notify_owner'],
        'accumulate_mode': DEFAULT_SETTINGS['accumulate_mode']
    }

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(MESSAGES_FILE):
            with open(MESSAGES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return {}

def save_messages():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        with open(MESSAGES_FILE, 'w', encoding='utf-8') as f:
            json.dump(stored_messages, f, indent=4, default=str)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
bot_settings = load_all_settings()
stored_messages = load_messages()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_invite_link(context):
    code = secrets.token_urlsafe(6)[:8]
    bot_username = context.bot.username
    return f"https://t.me/{bot_username}?start={code}"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_welcome_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    try:
        await update.message.reply_animation(
            animation=bot_settings['welcome_gif'],
            caption=bot_settings['welcome_text'],
            parse_mode=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text(bot_settings['welcome_text'])

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if user.id != context.bot_data['OWNER_ID']:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    new_count = sum(1 for user_msgs in stored_messages.values() for msg in user_msgs if not msg.get('viewed', False))
    total_count = sum(len(msgs) for msgs in stored_messages.values())
    
    keyboard = [
        [InlineKeyboardButton(f"üíå –°–æ–æ–±—â–µ–Ω–∏—è ({new_count}/{total_count})", callback_data="view_messages")],
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_link")],
        [InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def show_main_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton(
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –í–ö–õ' if bot_settings['notify_owner'] else '‚ùå –í–´–ö–õ'}",
                callback_data="toggle_notify"
            )
        ],
        [
            InlineKeyboardButton(
                f"üì¶ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ: {'‚úÖ –í–ö–õ' if bot_settings['accumulate_mode'] else '‚ùå –í–´–ö–õ'}",
                callback_data="toggle_accumulate"
            )
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚öôÔ∏è *–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏* ‚ú®\n\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if bot_settings['notify_owner'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
        f"üì¶ –†–µ–∂–∏–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω' if bot_settings['accumulate_mode'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n\n"
        "‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≥–∏—Ñ–∫–∞, —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π) —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è "
        "—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ Settings",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def view_accumulated_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not stored_messages:
        await query.edit_message_text("üì≠ –ù–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return
    
    keyboard = []
    for user_id, messages in stored_messages.items():
        new_count = sum(1 for msg in messages if not msg.get('viewed', False))
        username = messages[0].get('username', '–±–µ–∑ @username')
        full_name = messages[0].get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        
        keyboard.append([
            InlineKeyboardButton(
                f"{full_name} (@{username}) - {len(messages)} —Å–æ–æ–±—â. ({new_count} –Ω–æ–≤—ã—Ö)",
                callback_data=f"user_msgs_{user_id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì¨ *–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è* ‚ú®\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def view_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.replace("user_msgs_", "")
    messages = stored_messages.get(user_id, [])
    
    if not messages:
        await query.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
    for msg in messages:
        msg['viewed'] = True
    save_messages()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    message_list = []
    for i, msg in enumerate(messages, 1):
        timestamp = datetime.fromisoformat(msg['timestamp']).strftime("%d.%m.%Y %H:%M")
        content_preview = msg['content'][:100] + ('...' if len(msg['content']) > 100 else '')
        message_list.append(f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ #{i}* ({timestamp}):\n{content_preview}")
    
    text = "\n\n".join(message_list)
    full_name = messages[0].get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    username = messages[0].get('username', '–±–µ–∑ @username')
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_messages")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üì≠ *–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {full_name} (@{username})* ‚ú®\n\n{text}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
async def generate_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    invite_link = generate_invite_link(context)
    
    keyboard = [[
        InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={invite_link}&text=–ó–∞–¥–∞–π –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ‚ú®")
    ], [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîó *–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤* ‚ú®\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n\n"
        f"üëâ `{invite_link}`\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "view_messages":
        await view_accumulated_messages(update, context)
    elif query.data == "get_link":
        await generate_link(update, context)
    elif query.data == "main_settings":
        await show_main_settings(update, context)
    elif query.data == "toggle_notify":
        bot_settings['notify_owner'] = not bot_settings['notify_owner']
        await show_main_settings(update, context)
    elif query.data == "toggle_accumulate":
        bot_settings['accumulate_mode'] = not bot_settings['accumulate_mode']
        await show_main_settings(update, context)
    elif query.data.startswith("user_msgs_"):
        await view_user_messages(update, context)
    elif query.data in ["back_to_admin", "back_to_main"]:
        await admin_panel_callback(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_welcome_message(update, context)

# –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def auto_delete_messages(context: CallbackContext):
    global SENT_MESSAGES
    current_time = datetime.now()
    
    for msg_data in SENT_MESSAGES[:]:
        if (current_time - msg_data['timestamp']) > timedelta(minutes=25):
            try:
                await context.bot.delete_message(
                    chat_id=msg_data['chat_id'],
                    message_id=msg_data['message_id']
                )
                SENT_MESSAGES.remove(msg_data)
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {msg_data['message_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
async def send_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ê–Ω—Ç–∏—Å–ø–∞–º
        user_id = update.message.from_user.id
        current_time = datetime.now()
        
        if user_id in USER_LAST_MESSAGE:
            if (current_time - USER_LAST_MESSAGE[user_id]).seconds < 10:
                warning = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥!")
                await asyncio.sleep(3)
                await warning.delete()
                return
        USER_LAST_MESSAGE[user_id] = current_time
        
        # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥
        if update.message.text and update.message.text.startswith('/'):
            return
            
        user = update.message.from_user
        content = update.message.text or update.message.caption or "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_message = bot_settings['channel_template'].format(content=content)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        sent_message = None
        if update.message.text:
            sent_message = await context.bot.send_message(
                chat_id=context.bot_data['CHANNEL_ID'],
                text=formatted_message
            )
        elif update.message.photo:
            sent_message = await context.bot.send_photo(
                chat_id=context.bot_data['CHANNEL_ID'],
                photo=update.message.photo[-1].file_id,
                caption=formatted_message
            )
        elif update.message.video:
            sent_message = await context.bot.send_video(
                chat_id=context.bot_data['CHANNEL_ID'],
                video=update.message.video.file_id,
                caption=formatted_message
            )
        elif update.message.document:
            sent_message = await context.bot.send_document(
                chat_id=context.bot_data['CHANNEL_ID'],
                document=update.message.document.file_id,
                caption=formatted_message
            )
        elif update.message.audio:
            sent_message = await context.bot.send_audio(
                chat_id=context.bot_data['CHANNEL_ID'],
                audio=update.message.audio.file_id,
                caption=formatted_message
            )
        elif update.message.voice:
            sent_message = await context.bot.send_voice(
                chat_id=context.bot_data['CHANNEL_ID'],
                voice=update.message.voice.file_id,
                caption=formatted_message
            )
        elif update.message.sticker:
            sent_message = await context.bot.send_sticker(
                chat_id=context.bot_data['CHANNEL_ID'],
                sticker=update.message.sticker.file_id
            )
        elif update.message.animation:
            sent_message = await context.bot.send_animation(
                chat_id=context.bot_data['CHANNEL_ID'],
                animation=update.message.animation.file_id,
                caption=formatted_message
            )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
        if sent_message:
            SENT_MESSAGES.append({
                'message_id': sent_message.message_id,
                'chat_id': context.bot_data['CHANNEL_ID'],
                'timestamp': datetime.now()
            })
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        user_id = str(user.id)
        if user_id not in stored_messages:
            stored_messages[user_id] = []
        
        stored_messages[user_id].append({
            'timestamp': datetime.now().isoformat(),
            'type': 'text',
            'content': content,
            'full_name': user.full_name,
            'username': user.username,
            'viewed': False
        })
        save_messages()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = await update.message.reply_text(
            "‚ú® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!* üíñ\n"
            "–≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
            parse_mode="Markdown"
        )
        await update.message.delete()
        await asyncio.sleep(DELETE_DELAY)
        await confirmation.delete()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        context.bot_data['message_count'] = context.bot_data.get('message_count', 0) + 1
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ callback
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    new_count = sum(1 for user_msgs in stored_messages.values() for msg in user_msgs if not msg.get('viewed', False))
    total_count = sum(len(msgs) for msgs in stored_messages.values())
    
    keyboard = [
        [InlineKeyboardButton(f"üíå –°–æ–æ–±—â–µ–Ω–∏—è ({new_count}/{total_count})", callback_data="view_messages")],
        [InlineKeyboardButton("üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_link")],
        [InlineKeyboardButton("‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å* ‚ú®\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

def main():
    from config import BOT_TOKEN, CHANNEL_ID, OWNER_ID
    
    application = Application.builder().token(BOT_TOKEN).build()
    application.bot_data['CHANNEL_ID'] = CHANNEL_ID
    application.bot_data['OWNER_ID'] = OWNER_ID
    application.bot_data['message_count'] = 0
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.ALL & ~filters.COMMAND, 
        send_to_channel
    ))
    
    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(auto_delete_messages, interval=60, first=10)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
